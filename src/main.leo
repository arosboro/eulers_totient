// The 'eulers_totient' program.
program eulers_totient.aleo {
    inline eulers_product(result: field, n: field) -> field {
        let temp: field = result;
        temp -= result / n;
        return temp;
    }

    transition sample_primes(n_index: u32, k_index: u32) -> (field) {
        assert(n_index < 32u32);
        assert(k_index < 10u32);
        const k_delta: u32 = 220u32;
        // Note that 2n-k will be an n bit number (for these k's)
        // n is 0 + k_delta .. 31 + k_delta
        // k is the number contained in the [u32; 10] list (ten least k's)
        // the prime is figured out by (2 ** n) - k
        let prime_table: [[u32; 10]; 32] = [
            [77u32, 167u32, 395u32, 473u32, 483u32, 585u32, 587u32, 609u32, 923u32, 963u32],
            [3u32, 133u32, 309u32, 373u32, 411u32, 573u32, 759u32, 855u32, 979u32, 999u32],
            [117u32, 263u32, 335u32, 437u32, 641u32, 647u32, 875u32, 1035u32, 1103u32, 1125u32],
            [235u32, 259u32, 549u32, 715u32, 777u32, 1125u32, 1221u32, 1225u32, 1417u32, 1621u32],
            [63u32, 363u32, 573u32, 719u32, 773u32, 857u32, 1025u32, 1223u32, 1227u32, 1253u32],
            [49u32, 81u32, 103u32, 261u32, 445u32, 489u32, 609u32, 625u32, 741u32, 825u32],
            [5u32, 77u32, 155u32, 203u32, 215u32, 417u32, 533u32, 573u32, 767u32, 833u32],
            [405u32, 441u32, 625u32, 721u32, 835u32, 855u32, 1017u32, 1149u32, 1479u32, 1507u32],
            [93u32, 149u32, 185u32, 455u32, 537u32, 549u32, 723u32, 899u32, 1209u32, 1283u32],
            [91u32, 291u32, 475u32, 531u32, 565u32, 685u32, 733u32, 775u32, 939u32, 1093u32],
            [27u32, 77u32, 345u32, 351u32, 831u32, 917u32, 1221u32, 1245u32, 1247u32, 1335u32],
            [165u32, 217u32, 235u32, 249u32, 345u32, 391u32, 399u32, 439u32, 481u32, 559u32],
            [567u32, 665u32, 833u32, 875u32, 1163u32, 1197u32, 1253u32, 1403u32, 1917u32, 2097u32],
            [3u32, 159u32, 289u32, 373u32, 511u32, 531u32, 595u32, 615u32, 759u32, 1113u32],
            [83u32, 243u32, 257u32, 341u32, 503u32, 581u32, 593u32, 683u32, 1157u32, 1803u32],
            [15u32, 151u32, 181u32, 259u32, 451u32, 537u32, 561u32, 679u32, 727u32, 1167u32],
            [209u32, 455u32, 513u32, 569u32, 657u32, 875u32, 915u32, 1203u32, 1317u32, 1349u32],
            [181u32, 649u32, 765u32, 829u32, 949u32, 1449u32, 1515u32, 1633u32, 1689u32, 1711u32],
            [161u32, 215u32, 383u32, 425u32, 665u32, 731u32, 791u32, 825u32, 1263u32, 1313u32],
            [87u32, 199u32, 421u32, 531u32, 939u32, 1147u32, 1395u32, 1701u32, 2001u32, 2187u32],
            [467u32, 797u32, 887u32, 1493u32, 1529u32, 2027u32, 2093u32, 2253u32, 2495u32, 2589u32],
            [39u32, 819u32, 1383u32, 2065u32, 2113u32, 2133u32, 2215u32, 2253u32, 2295u32, 2505u32],
            [63u32, 267u32, 281u32, 527u32, 777u32, 945u32, 971u32, 1077u32, 1223u32, 1487u32],
            [9u32, 31u32, 199u32, 475u32, 507u32, 699u32, 1117u32, 1125u32, 1179u32, 1417u32],
            [189u32, 329u32, 767u32, 1065u32, 1289u32, 1553u32, 1565u32, 1923u32, 2105u32, 2505u32],
            [163u32, 303u32, 489u32, 759u32, 843u32, 861u32, 1039u32, 1321u32, 1389u32, 1413u32],
            [107u32, 171u32, 243u32, 483u32, 567u32, 797u32, 945u32, 1155u32, 1617u32, 1697u32],
            [81u32, 309u32, 361u32, 411u32, 525u32, 571u32, 729u32, 939u32, 1047u32, 1149u32],
            [237u32, 387u32, 485u32, 603u32, 605u32, 765u32, 887u32, 1097u32, 1223u32, 1515u32],
            [75u32, 279u32, 385u32, 403u32, 531u32, 583u32, 595u32, 693u32, 999u32, 1021u32],
            [207u32, 407u32, 1053u32, 1391u32, 1655u32, 1671u32, 1785u32, 1793u32, 2111u32, 2327u32],
            [9u32, 325u32, 355u32, 369u32, 451u32, 465u32, 615u32, 619u32, 1141u32, 1339u32],
        ];
        let n: field = (n_index + k_delta) as field;
        for i: u32 in 0u32..32u32 {
            if (i == n_index) {
                for j: u32 in 0u32..10u32 {
                    if (j == k_index) {
                        let k: field = prime_table[i][j] as field;
                        return (2field ** n) - k;
                    }
                }
            }
        }
        return 0field;
    }

    transition phi(p: field, q: field) -> field {
        return (p - 1field) * (q - 1field);
    }
}
